###############################################################################
#
### General command
#

docker version				
docker info
docker --help
docker attach --help		
docker stats nazwa
docker logs nazwa
docker events
docker top
docker history nazwa
pstree `pidof docker`
pstree -p `pidof docker`


### Images managment 


docker images								- list available all images
docker run -t -i ubuntu:14.04 /bin/bash 	- run container
docker search centos						- search image named centos
docker pull centos							- download image
docker push adam/myimage					- push to docker hub
docker rmi myimage							- remove image


Create new image base on current running container:

docker commit -m "text" -a "author" nazwaKontenera nowaNazwaObrazu    


Image building - docker file

mkdir myFolder1
cd myFolder1
touch DockerFile

FROM ubuntu:14.04								- each instruction creates
MAINTAINER adam <adam@ex.com>				    - additional layer
RUN apt-get update && apt-get install -y ruby
RUN gem install sinatra

docker build -t adam/myFolder1:v2				- build image
docker run -t -i adam/myFolder1:v2 /bin/bash 	- run container from our image
docker tag 5db5asdd adam/myFolder1:devel	    - add tag: docker images


### Uruchamianie kontenera


Names:

docker run --name myname mycont /bin/bash		- set container name
docker run --hostname="a.e.pl" centos /bin/bash - set host name
docker run -t -i centos /bin/bash		        - t assign tty  
												- i interactive mode
docker run -d centos /bin/bash				    - run in the background


Mounting:

docker run -v /data mycont						- create new volume in conta..
docker run -v /src:/dst/con centos /bin/bash    - mount volume container:host
docker run .. -read-only=true -v /src:/dst ..	- mount read-only mode
docker run -v /Users/<path>:/<container path> . - linux format
docker run -v /c/Users/<path>:/<container path> - windows format
docker run --rm -ti centos /bin/bash		    - rm container after stoping


Networking:

docker run -p centos /bin/bash		            - p map all ports
docker run -p 500 centos /bin/bash   	        - map to host port +32768
docker run -p 80:500 centos /bin/bash  	        - map container 500 => 80 host
docker run --dns=8.8.8.8 --dns=8.8.4.4 ... 	    - set container dns
docker run --dns-search=exampl.com ..		    - et serach domain
docker run --mac-address"a2:11:aa:22:bb:33" ..	- set mac address
exit 											- exit and stop container
	???											- exit without stopping
	

Shering data between containers:

It is consider as a good practice to create additional container witch going 
to be a source of data for the rest.

Example:

1. Create source container:

docker create -v /datacon --name dbstore training/postgres /bin/true

2. Use ' --volumes-from ' to mount data in other containers.

docker run -d --volumes-from datacon --name db1 training/postgres
docker run -d --volumes-from datacon --name db2 training/postgres

docker volume ls								- list volumes
docker volume rm <volume name> 					- remove volumes
docker ps -a									- list all running containers
docker ps -l									- last started container
docker port nazwa_kont 5000						- show mapping details
docker logs nazwa_cont							- look inside container
docker logs -f nazwa_cont						- show connection details
docker top nazwa_cont							- look at processes
docker inspect nazwa_cont						- container details
docker stop nazwa_cont							- stop container 
docker start nazwa_cont							- start container
docker kill nazwa_cont							- kill container proces
docker rm nazwa_cont							- remove container


### Docker networking


docker network ls  						- list all networks default : bridge
docker run --net=<network> 				- add container to specific network
docker network connet mynet mycont	    - add running container to network
docker network create -d bridge myname	- create bridge network
docker network disconnect bridge		- remove container from network	
docker network inspect bridge 		    - Show info about bridge network.
										  Containers are automatically added to
										  this network. (They can communicate)

We can define our own network. Containers can belong to one or more networks
simultaneously. Networks can isolate containers. There is several kind of 
networks:

### A bridge network:

docker network create --driver bridge isolated_nw	- creat bridge network
docker network inspect isolated_nw					- show data of this network
docker network ls									- show our net. as well	
docker run --net=isolated_nw -itd --name=cont1 centos	- create container			
													  and connect them to our 
													  network.
													  
Containers in the same network must have the same host. Each of them is able
to communicate with others. It is some kind of isolation from public network.
To make part of the network public we have to use port mapping. 

To create our own bridge: 

	$ sudo service docker stop		
	$ sudo ip link set dev docker0 down
	$ sudo brctl delbr docker0

	$ sudo brctl addbr bridge0
	$ sudo ip addr add 192.168.5.1/24 dev bridge0
	$ sudo ip link set dev bridge0 up

	-b BRIDGE or --bridge=BRIDGE   - with network docker should share

We cane specify some options:

$ docker network create -d overlay
  --subnet=192.168.0.0/16 --subnet=192.170.0.0/16
  --gateway=192.168.0.100 --gateway=192.170.0.100
  --ip-range=192.168.1.0/24
  --aux-address a=192.168.1.5 --aux-address b=192.168.1.6
  --aux-address a=192.170.1.5 --aux-address b=192.170.1.6
  my-multihost-network


### An overlay network

	Ten typ sieci wymaga waznej uslugi key-value store. Przed konfiguracja sieci musisz
	zainstalowac i skonfigutowac te klucze. Jest to usluga z ktorej wszystkie hosty
	beda czerpac klucze. Trzeba otwozyc odpowiednie porty (dokumentacja). Aby stworzyc siec
	konfigurujesz opcie ja kazdym z demonow docker do uzycia sieci overlayi(doc).

docker network create --driver overlay my_multi_host_network
docker run -itd --net=my_multi_host_network 

# Custom network plugin

	Mozesz stworzy nowe pluginy. Po stworzeniu takowego dodajemy go w standardowy sposob

docker network create --driver weave mynet




###############################################################################
#
#### Docker


Docker core technology:

docker compose
docker universal control plane
docker swarm
docker trusted registry

kernel namespaces 			- provides isolation
control groups (cgroups)    - provides resources limitations
capabilities				- as something for security

LXC  (default execution driver responsible for above parts)
libcontainer ( is newer driver controled by peaple from docker company)
is totaly cros platform. 


### Docker info

docker -v    				  - basic version info
docker version				  - more detail about version 
docker info					  - lots of info about system etc. 
							    * number of containers/ images
							    * storage driver / execution driver ...

### Basic docker work


ls -l /run 					  - docker.sock   docker lisen on this linux socket
							    we can add regular user to docker group. 
sudo docker run -it centos    - we need to have root privilages to get access
							    to the deamon
sudo gpasswd -a user docker	  - add user to docker group to grant privilages
cat /etc/group 				  - check if your user a member of vagrant group.
							    logout and login to gain new privilages
.. run -it centos /bin/bash	  - now everything is working corectly. 
								/bin/bash give us access to command prompt
exit						  - exit and turn away container
								

### Make docker listening on network port instead of linux socket


netstat -tlp				  - check if docker is listening on network ports
service docker stop  		  - stop docker
docker daemon -H x.x.x.x:port &  	force docker to leaseon on network socket
docker info					  - failure - becaouse docker is listening on 
							    network socket.
export DOCKER_HOST="tcp://x.x.x.x:port"   	set environment variable to allow
								docker client to talk to remote docker daemon
export DOCKER_HOST=			  - retrieve default settings (talk to local again)
fg 1  
crtl + C					  - break daemon that listen on ip port.


### Playing around with docker container


docker run -it centos /bin/basic	- create container and tty access
exit								- exit and halt container
(right) crtl + p + q 				- exit without stoping container
dpcler ps							- show running containers
docker ps -a						- show all containers
docker start ..id..					- start halted container. 
docker attach ..id..				- go to container shell
							
The same container will be started. So if we create some file after exiting
and starting it file remain the same. 


### Docker images


docker pull centos					- download latest centos images
dccker pull centos -about			- download all centos images
docker images centos				- show all centos images
docke images						- show all images
/var/lib/docker/<storage_driver>	- location of images
coreos 		 						- is the samllest version of among images

We can consider official repo as a trusted source of images.
hub.docker.com 						- web with repos

docker commit ..src_img_id... name  - create new docker images base on container
docker images						- new image is now visable
docler history imgname				- show history of the image
docker save -o /path/img.tar myimg	- save myimg in file
scp img.tar user@remove:~/..		- copy image between host
tar -tf /path/img.tar				- allow us to look inside image
docker load -i /path/img.tar		- impor image to docker host
docker images						- show us the new image


### Docker containers


docker top container_id				- show stats.. about process inside cont..
									  it worths mentioning that process pids 
									  have namespaces.
docker run ubuntu:14.02				- run cointainer with specyfic image ver..
docker run --cpu-shares=256  		- how many cpu shares container can get
docker run --cpu-shares=1024		- full access
docker run memory=1g				- give cont.. access to 1g host memory
docker run -d ...					- run in deatach mode (in background)
docker inspect cont_id				- detail info about container
docker start|stop|restart con_id    - we can also specify name of the coint..
									  (we deal with the same ver.. of cont..)
docker ps -l						- last running container
docker logs con_id					- show every log from a container


nsenter:

This command allow us to enter namespece. PID is required. After executing
we can run command inside container NS. 

nsenter -m -u -n -p -i -t 1234 /bin/bash   - (mount NS, uts NS, network NS, 
											 process NS, IPS NS, target, PID)
docker inspect con_id | grep Pid 	       - get pid from the container

exit									   - exit NS without stopping cointai..
docker-enter con_id						   - simply way to do the same
											 exit do not stop the container
docker exec -it con_id /bin/bash		   - exec command inside container
 (recommended)								 in this case run terminal
											 exit do not stop the container
						
						
### Build docker imagem Dockerfile


Dockerfile contains instruction to build image. Rememver choose carefuly the
place vere you create your docker file. Every file in your directory will be
included in new image.










